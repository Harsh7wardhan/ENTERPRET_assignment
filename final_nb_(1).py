# -*- coding: utf-8 -*-
"""FINAL_NB_(1)ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1fYwo71YyMkVK0HDEZcrz38g3MFY4z0
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import pickle

train_data=pd.read_csv("C:/Users/harsh/Downloads/train.csv")
test_data=pd.read_csv("C:/Users/harsh/Downloads/test.csv")
train_data.isnull().any().sum()

test_data.isnull().any().sum()

"""THERE ARE NO NULL VALUES"""

sns.countplot(train_data['label'])

"""0 - NEGATIVE 
1 - NEUTRAL
2 - POSITIVE

Here , we eliminate all records having label = 1 , that is a NEUTRAL SENTIMENT response whiich is of no use to us as mentioned in the motivation for this project.
"""

new_train=train_data[train_data['label']!=1]

new_train.shape

sns.countplot(new_train['label'])

"""I've employed various text pre-processing techniques , out of which Count Vectorizer seems to perform the best."""

from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer

messages=new_train.copy()
messages.reset_index(inplace=True)
messages.head(10)

import nltk
nltk.download('punkt')
nltk.download('stopwords')

# Cleaning the texts
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from nltk.stem import WordNetLemmatizer

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus = []
for i in range(0, len(messages)):
    review = re.sub('[^a-zA-Z]', ' ', messages['text'][i])
    review = review.lower()
    review = review.split()
    
    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

corpus

## Applying Countvectorizer
# Creating the Bag of Words model
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,ngram_range=(1,3))
X = cv.fit_transform(corpus).toarray()

# from sklearn.feature_extraction.text import TfidfVectorizer
# tfidf_v=TfidfVectorizer(max_features=5000,ngram_range=(1,3))
# X=tfidf_v.fit_transform(corpus).toarray()

len(X)

y=messages['label']

## Divide the dataset into Train and Test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)

cv.get_feature_names()[:20]

cv.get_params()

import matplotlib.pyplot as plt

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    See full source and example: 
    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html
    
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')



from sklearn.metrics import accuracy_score , confusion_matrix , plot_confusion_matrix
import numpy as np
import itertools

"""**MULTINOMIAL NB**"""

from sklearn.naive_bayes import MultinomialNB
classifier=MultinomialNB()

classifier.fit(X_train, y_train)
pred = classifier.predict(X_test)
score = accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
cm = confusion_matrix(y_test, pred)
plot_confusion_matrix(classifier,X_test,y_test)

cm

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))

"""Passive Aggressive Classifier Algorithm"""

from sklearn.linear_model import PassiveAggressiveClassifier
linear_clf = PassiveAggressiveClassifier()

linear_clf.fit(X_train, y_train)
pred = linear_clf.predict(X_test)
score = accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
cm = confusion_matrix(y_test, pred)
plot_confusion_matrix(classifier,X_test,y_test)

print(classification_report(y_test, pred))



"""Multinomial Classifier with Hyperparameter"""

classifier=MultinomialNB(alpha=0.1)
previous_score=0
for alpha in np.arange(0,1,0.1):
    sub_classifier=MultinomialNB(alpha=alpha)
    sub_classifier.fit(X_train,y_train)
    y_pred=sub_classifier.predict(X_test)
    score = accuracy_score(y_test, y_pred)
    if score>previous_score:
        classifier=sub_classifier
    print("Alpha: {}, Score : {}".format(alpha,score))

classifier.fit(X_train, y_train)
pred = classifier.predict(X_test)
score = accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
cm = confusion_matrix(y_test, pred)
plot_confusion_matrix(classifier,X_test,y_test)

"""I was able to achieve accuracy as high as 80.7 % using the BAG OF WORDS MODEL."""

## Get Features names
feature_names = cv.get_feature_names()

classifier.coef_[0]

"""Using hyperparameter tuning we can get the most positive and most negative reviews"""

### Most Positive Reviews
sorted(zip(classifier.coef_[0], feature_names), reverse=True)[:20]

### Most negative reviews
sorted(zip(classifier.coef_[0], feature_names))[:20]


"""PREDICTING ACTUAL OUTPUTS FOR THE TEST SET

"""

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus_new = []
for i in range(0, len(test_data)):
    review_new = re.sub('[^a-zA-Z]', ' ', test_data['text'][i])
    review_new = review_new.lower()
    review_new = review_new.split()
    
    review_new = [ps.stem(word) for word in review_new if not word in stopwords.words('english')]
    review_new = ' '.join(review_new)
    corpus_new.append(review_new)

## Applying Countvectorizer
# Creating the Bag of Words model
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,ngram_range=(1,3))
X_new = cv.fit_transform(corpus_new).toarray()

final_predictions=classifier.predict(X_new)

test_file=pd.read_csv("C:/Users/harsh/Downloads/test.csv")
test_file['label']=final_predictions
print(test_file)
test_file.to_csv('test.csv')
# Saving model to disk
pickle.dump(classifier, open('model.pkl','wb'))

# Loading model to compare the results
model_1 = pickle.load(open('model.pkl','rb'))